{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5141f04a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T15:43:11.127987Z",
     "iopub.status.busy": "2024-10-03T15:43:11.126745Z",
     "iopub.status.idle": "2024-10-03T15:43:47.658326Z",
     "shell.execute_reply": "2024-10-03T15:43:47.657136Z"
    },
    "papermill": {
     "duration": 36.54723,
     "end_time": "2024-10-03T15:43:47.667498",
     "exception": false,
     "start_time": "2024-10-03T15:43:11.120268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting caer\r\n",
      "  Downloading caer-2.0.8-py3-none-any.whl.metadata (7.8 kB)\r\n",
      "Collecting canaro\r\n",
      "  Downloading canaro-1.1.0-py3-none-any.whl.metadata (2.6 kB)\r\n",
      "Collecting mypy (from caer)\r\n",
      "  Downloading mypy-1.11.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl.metadata (1.9 kB)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from caer) (1.26.4)\r\n",
      "Requirement already satisfied: opencv-contrib-python in /opt/conda/lib/python3.10/site-packages (from caer) (4.10.0.84)\r\n",
      "Requirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from caer) (4.12.2)\r\n",
      "Requirement already satisfied: tensorflow in /opt/conda/lib/python3.10/site-packages (from canaro) (2.16.1)\r\n",
      "Requirement already satisfied: mypy-extensions>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from mypy->caer) (1.0.0)\r\n",
      "Requirement already satisfied: tomli>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from mypy->caer) (2.0.1)\r\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (24.3.25)\r\n",
      "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (0.2.0)\r\n",
      "Requirement already satisfied: h5py>=3.10.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (3.11.0)\r\n",
      "Requirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (18.1.1)\r\n",
      "Requirement already satisfied: ml-dtypes~=0.3.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (0.3.2)\r\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (3.3.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (21.3)\r\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (3.20.3)\r\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (2.32.3)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (70.0.0)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (1.16.0)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (2.4.0)\r\n",
      "Requirement already satisfied: wrapt>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (1.16.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (1.64.1)\r\n",
      "Requirement already satisfied: tensorboard<2.17,>=2.16 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (2.16.2)\r\n",
      "Requirement already satisfied: keras>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (3.3.3)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow->canaro) (0.37.0)\r\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow->canaro) (0.43.0)\r\n",
      "Requirement already satisfied: rich in /opt/conda/lib/python3.10/site-packages (from keras>=3.0.0->tensorflow->canaro) (13.7.1)\r\n",
      "Requirement already satisfied: namex in /opt/conda/lib/python3.10/site-packages (from keras>=3.0.0->tensorflow->canaro) (0.0.8)\r\n",
      "Requirement already satisfied: optree in /opt/conda/lib/python3.10/site-packages (from keras>=3.0.0->tensorflow->canaro) (0.11.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow->canaro) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow->canaro) (3.7)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow->canaro) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow->canaro) (2024.7.4)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.17,>=2.16->tensorflow->canaro) (3.6)\r\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.17,>=2.16->tensorflow->canaro) (0.7.2)\r\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.17,>=2.16->tensorflow->canaro) (3.0.3)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->tensorflow->canaro) (3.1.2)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.17,>=2.16->tensorflow->canaro) (2.1.5)\r\n",
      "Requirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras>=3.0.0->tensorflow->canaro) (3.0.0)\r\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras>=3.0.0->tensorflow->canaro) (2.18.0)\r\n",
      "Requirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich->keras>=3.0.0->tensorflow->canaro) (0.1.2)\r\n",
      "Downloading caer-2.0.8-py3-none-any.whl (809 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m809.5/809.5 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading canaro-1.1.0-py3-none-any.whl (19 kB)\r\n",
      "Downloading mypy-1.11.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl (12.5 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.5/12.5 MB\u001b[0m \u001b[31m39.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: mypy, caer, canaro\r\n",
      "Successfully installed caer-2.0.8 canaro-1.1.0 mypy-1.11.2\r\n",
      "Imports succeeded.\n"
     ]
    }
   ],
   "source": [
    "!pip install caer canaro\n",
    "import os\n",
    "import caer\n",
    "import canaro\n",
    "import numpy as np\n",
    "import cv2 as cv\n",
    "import gc\n",
    "print(\"Imports succeeded.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "43910613",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T15:43:47.684408Z",
     "iopub.status.busy": "2024-10-03T15:43:47.682800Z",
     "iopub.status.idle": "2024-10-03T15:43:47.688970Z",
     "shell.execute_reply": "2024-10-03T15:43:47.687815Z"
    },
    "papermill": {
     "duration": 0.016909,
     "end_time": "2024-10-03T15:43:47.691375",
     "exception": false,
     "start_time": "2024-10-03T15:43:47.674466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "IMG_SIZE   = (400, 160)\n",
    "channels   = 1\n",
    "char_path  =  r'/kaggle/input/gta-vehicles/vehicles'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8a39e9e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T15:43:47.706744Z",
     "iopub.status.busy": "2024-10-03T15:43:47.706298Z",
     "iopub.status.idle": "2024-10-03T15:43:47.777800Z",
     "shell.execute_reply": "2024-10-03T15:43:47.776682Z"
    },
    "papermill": {
     "duration": 0.082211,
     "end_time": "2024-10-03T15:43:47.780445",
     "exception": false,
     "start_time": "2024-10-03T15:43:47.698234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'forkliftf': 'forkliftf.jpg',\n",
       " 'fmj': 'fmj.jpg',\n",
       " 'rocotof': 'rocotof.jpg',\n",
       " 'lectro': 'lectro.jpg',\n",
       " 'torof': 'torof.jpg',\n",
       " 'sheriffcruiserf': 'sheriffcruiserf.jpg',\n",
       " 'khamelionf': 'khamelionf.jpg',\n",
       " 'ratloaderf': 'ratloaderf.jpg',\n",
       " 'picadorf': 'picadorf.jpg',\n",
       " 'tropos': 'tropos.jpg',\n",
       " 'bestiagts': 'bestiagts.jpg',\n",
       " 'feltzerf': 'feltzerf.jpg',\n",
       " 'stirlinggtf': 'stirlinggtf.jpg',\n",
       " 'bati801f': 'bati801f.jpg',\n",
       " 'blistaf': 'blistaf.jpg',\n",
       " 'brawlerf': 'brawlerf.jpg',\n",
       " 'fcr-1000': 'fcr-1000.jpg',\n",
       " 'blistacompact2f': 'blistacompact2f.jpg',\n",
       " 'specter-custom': 'specter-custom.jpg',\n",
       " 'policeprisonbusf': 'policeprisonbusf.jpg',\n",
       " 'drift-tampa': 'drift-tampa.jpg',\n",
       " 'lurcher': 'lurcher.jpg',\n",
       " 'baller1f': 'baller1f.jpg',\n",
       " 'brioso': 'brioso.jpg',\n",
       " 'atomicblimpf': 'atomicblimpf.jpg',\n",
       " 'sanctus': 'sanctus.jpg',\n",
       " 'tipperf': 'tipperf.jpg',\n",
       " 'blazer-aqua': 'blazer-aqua.jpg',\n",
       " 'etr1': 'etr1.jpg',\n",
       " 'buffalo3f': 'buffalo3f.jpg',\n",
       " 'dodof': 'dodof.jpg',\n",
       " 'sovereignf': 'sovereignf.jpg',\n",
       " 'radiusf': 'radiusf.jpg',\n",
       " 're-7b': 're-7b.jpg',\n",
       " 'cometf': 'cometf.jpg',\n",
       " 'dune': 'dune.jpg',\n",
       " 'windsor2': 'windsor2.jpg',\n",
       " 'gargoyle': 'gargoyle.jpg',\n",
       " 'liberatorf': 'liberatorf.jpg',\n",
       " 'cavalcade1f': 'cavalcade1f.jpg',\n",
       " 'casco': 'casco.jpg',\n",
       " 'bisonf': 'bisonf.jpg',\n",
       " 'rtgcrane': 'rtgcrane.jpg',\n",
       " 'barrackssemif': 'barrackssemif.jpg',\n",
       " 'romerohearsef': 'romerohearsef.jpg',\n",
       " 'ztypef': 'ztypef.jpg',\n",
       " 'dinghyf': 'dinghyf.jpg',\n",
       " 'sadlerf': 'sadlerf.jpg',\n",
       " 'buffalo1f': 'buffalo1f.jpg',\n",
       " 'nero-custom': 'nero-custom.jpg',\n",
       " 'dubsta6x6f': 'dubsta6x6f.jpg',\n",
       " 'stretchf': 'stretchf.jpg',\n",
       " 'rhinotankf': 'rhinotankf.jpg',\n",
       " 'igta5-logo-2.png': 'igta5-logo-2.png.jpg',\n",
       " 'tornado-rat-rod': 'tornado-rat-rod.jpg',\n",
       " 'exemplarf': 'exemplarf.jpg',\n",
       " 'technical-aqua': 'technical-aqua.jpg',\n",
       " 'rattruckf': 'rattruckf.jpg',\n",
       " 'fieldmasterf': 'fieldmasterf.jpg',\n",
       " 'sheriffgrangerf': 'sheriffgrangerf.jpg',\n",
       " 'bf400': 'bf400.jpg',\n",
       " 'flatbedf': 'flatbedf.jpg',\n",
       " 'dunebuggyf': 'dunebuggyf.jpg',\n",
       " 'adderf': 'adderf.jpg',\n",
       " 'docktugf': 'docktugf.jpg',\n",
       " 'rocket-voltic': 'rocket-voltic.jpg',\n",
       " 'shamalf': 'shamalf.jpg',\n",
       " 'stingerf': 'stingerf.jpg',\n",
       " 'street-blazer': 'street-blazer.jpg',\n",
       " 'diabolus-custom': 'diabolus-custom.jpg',\n",
       " 'seven70': 'seven70.jpg',\n",
       " 'vaderf': 'vaderf.jpg',\n",
       " 'bobcatxlf': 'bobcatxlf.jpg',\n",
       " 'windsorf': 'windsorf.jpg',\n",
       " 'jetmaxf': 'jetmaxf.jpg',\n",
       " 'baggerf': 'baggerf.jpg',\n",
       " 'jesterf': 'jesterf.jpg',\n",
       " 'seashark1f': 'seashark1f.jpg',\n",
       " 'ambulance1f': 'ambulance1f.jpg',\n",
       " 'gangburritof': 'gangburritof.jpg',\n",
       " 'volticf': 'volticf.jpg',\n",
       " 'camperf': 'camperf.jpg',\n",
       " 'swiftf': 'swiftf.jpg',\n",
       " 'vindicatorf': 'vindicatorf.jpg',\n",
       " 'vigerof': 'vigerof.jpg',\n",
       " 'mulef': 'mulef.jpg',\n",
       " 'desert-raid': 'desert-raid.jpg',\n",
       " 'fixterf': 'fixterf.jpg',\n",
       " 'itali-gtb-custom': 'itali-gtb-custom.jpg',\n",
       " 'doubletf': 'doubletf.jpg',\n",
       " 'coquetteblackfinf': 'coquetteblackfinf.jpg',\n",
       " 'stingergtf': 'stingergtf.jpg',\n",
       " 'rat-bike': 'rat-bike.jpg',\n",
       " 'chimera': 'chimera.jpg',\n",
       " 'fugitivef': 'fugitivef.jpg',\n",
       " 'oracle1f': 'oracle1f.jpg',\n",
       " 'dukesf': 'dukesf.jpg',\n",
       " 'unmarkedcruiserf': 'unmarkedcruiserf.jpg',\n",
       " 'buccaneerf': 'buccaneerf.jpg',\n",
       " 'frankenstange': 'frankenstange.jpg',\n",
       " 'jb700f': 'jb700f.jpg',\n",
       " 'utilitytruck2f': 'utilitytruck2f.jpg',\n",
       " 'oracle2f': 'oracle2f.jpg',\n",
       " 'shotaro': 'shotaro.jpg',\n",
       " 'rentalshuttlebusf': 'rentalshuttlebusf.jpg',\n",
       " 'scorcherf': 'scorcherf.jpg',\n",
       " 'endurexf': 'endurexf.jpg',\n",
       " 'kalaharif': 'kalaharif.jpg',\n",
       " 'froggerf': 'froggerf.jpg',\n",
       " 'sentinelxsf': 'sentinelxsf.jpg',\n",
       " 'voodoof': 'voodoof.jpg',\n",
       " 'contender': 'contender.jpg',\n",
       " 'stockadef': 'stockadef.jpg',\n",
       " 'baller3': 'baller3.jpg',\n",
       " 'dashoundf': 'dashoundf.jpg',\n",
       " 'seminolef': 'seminolef.jpg',\n",
       " 'buzzardf': 'buzzardf.jpg',\n",
       " 'furoregtf': 'furoregtf.jpg',\n",
       " 'tourbus1f': 'tourbus1f.jpg',\n",
       " 'gauntlet2f': 'gauntlet2f.jpg',\n",
       " 'sandkingxlf': 'sandkingxlf.jpg',\n",
       " 'vehicles-planes-cargo-plane': 'vehicles-planes-cargo-plane.jpg',\n",
       " 'fcr-1000-custom': 'fcr-1000-custom.jpg',\n",
       " 'zentornof': 'zentornof.jpg',\n",
       " 'blazerf': 'blazerf.jpg',\n",
       " 'tailgaterf': 'tailgaterf.jpg',\n",
       " 'rumpo-custom': 'rumpo-custom.jpg',\n",
       " 'cavalcade2f': 'cavalcade2f.jpg',\n",
       " 'raptor': 'raptor.jpg',\n",
       " 'policepredatorf': 'policepredatorf.jpg',\n",
       " 'titanf': 'titanf.jpg',\n",
       " 'stallion2f': 'stallion2f.jpg',\n",
       " 'vaccaf': 'vaccaf.jpg',\n",
       " 'felongtf': 'felongtf.jpg',\n",
       " 'manchez': 'manchez.jpg',\n",
       " 'baller4': 'baller4.jpg',\n",
       " 'whippetf': 'whippetf.jpg',\n",
       " 'ruiner-2000': 'ruiner-2000.jpg',\n",
       " 'sabref': 'sabref.jpg',\n",
       " 'mananaf': 'mananaf.jpg',\n",
       " 'phantomf': 'phantomf.jpg',\n",
       " 'yougaf': 'yougaf.jpg',\n",
       " '9fcabriof': '9fcabriof.jpg',\n",
       " 'aseaf': 'aseaf.jpg',\n",
       " 'rooseveltf': 'rooseveltf.jpg',\n",
       " 'injectionf': 'injectionf.jpg',\n",
       " 'wastelander': 'wastelander.jpg',\n",
       " 'tricyclesf': 'tricyclesf.jpg',\n",
       " 'hakuchou-drag-bike': 'hakuchou-drag-bike.jpg',\n",
       " 'emperorf': 'emperorf.jpg',\n",
       " 'fibbuffalof': 'fibbuffalof.jpg',\n",
       " 'mesaf': 'mesaf.jpg',\n",
       " 'hotknifef': 'hotknifef.jpg',\n",
       " 'innovationf': 'innovationf.jpg',\n",
       " 'dockhandlerf': 'dockhandlerf.jpg',\n",
       " 'virgof': 'virgof.jpg',\n",
       " 'luxorf': 'luxorf.jpg',\n",
       " 't20f': 't20f.jpg',\n",
       " 'stallion3f': 'stallion3f.jpg',\n",
       " 'buzzardattackf': 'buzzardattackf.jpg',\n",
       " 'rumpof': 'rumpof.jpg',\n",
       " 'tug': 'tug.jpg',\n",
       " 'bifff': 'bifff.jpg',\n",
       " 'itali-gtb': 'itali-gtb.jpg',\n",
       " 'schwartzerf': 'schwartzerf.jpg',\n",
       " 'bensonf': 'bensonf.jpg',\n",
       " 'asteropef': 'asteropef.jpg',\n",
       " 'mixer1f': 'mixer1f.jpg',\n",
       " 'bodhif': 'bodhif.jpg',\n",
       " 'stanierf': 'stanierf.jpg',\n",
       " 'fq2f': 'fq2f.jpg',\n",
       " 'xeroblimpf': 'xeroblimpf.jpg',\n",
       " 'boxvillef': 'boxvillef.jpg',\n",
       " 'guardianf': 'guardianf.jpg',\n",
       " 'rebel2f': 'rebel2f.jpg',\n",
       " 'sandkingswbf': 'sandkingswbf.jpg',\n",
       " 'dozerf': 'dozerf.jpg',\n",
       " 'journeyf': 'journeyf.jpg',\n",
       " 'gauntletf': 'gauntletf.jpg',\n",
       " 'monroef': 'monroef.jpg',\n",
       " 'towtrucksmallf': 'towtrucksmallf.jpg',\n",
       " 'futof': 'futof.jpg',\n",
       " 'mamba': 'mamba.jpg',\n",
       " 'sultanf': 'sultanf.jpg',\n",
       " 'trophy-truck': 'trophy-truck.jpg',\n",
       " 'policecruiser2f': 'policecruiser2f.jpg',\n",
       " 'thrustf': 'thrustf.jpg',\n",
       " 'prairief': 'prairief.jpg',\n",
       " 'massacrof': 'massacrof.jpg',\n",
       " 'crusaderf': 'crusaderf.jpg',\n",
       " 'huntleysf': 'huntleysf.jpg',\n",
       " 'peyotef': 'peyotef.jpg',\n",
       " 'haulerf': 'haulerf.jpg',\n",
       " 'trashmasterf': 'trashmasterf.jpg',\n",
       " 'omnis': 'omnis.jpg',\n",
       " 'ramp-buggy': 'ramp-buggy.jpg',\n",
       " 'gta-online-gameplay-street-racing-2': 'gta-online-gameplay-street-racing-2.jpg',\n",
       " 'tropicf': 'tropicf.jpg',\n",
       " 'phantom-wedge': 'phantom-wedge.jpg',\n",
       " 'pigallef': 'pigallef.jpg',\n",
       " 'minivanf': 'minivanf.jpg',\n",
       " 'busf': 'busf.jpg',\n",
       " 'reginaf': 'reginaf.jpg',\n",
       " 'scraptruckf': 'scraptruckf.jpg',\n",
       " 'supervolito': 'supervolito.jpg',\n",
       " 'bmxf': 'bmxf.jpg',\n",
       " 'chinof': 'chinof.jpg',\n",
       " 'vestraf': 'vestraf.jpg',\n",
       " 'carbonizzaref': 'carbonizzaref.jpg',\n",
       " 'baller2f': 'baller2f.jpg',\n",
       " 'surfer2f': 'surfer2f.jpg',\n",
       " 'parkrangerf': 'parkrangerf.jpg',\n",
       " 'utilitytruck1f': 'utilitytruck1f.jpg',\n",
       " 'faction': 'faction.jpg',\n",
       " 'policebikef': 'policebikef.jpg',\n",
       " 'ripleyf': 'ripleyf.jpg',\n",
       " 'metrotrain1': 'metrotrain1.jpg',\n",
       " 'maverickf': 'maverickf.jpg',\n",
       " 'hydra': 'hydra.jpg',\n",
       " 'dusterf': 'dusterf.jpg',\n",
       " 'zombie-chopper': 'zombie-chopper.jpg',\n",
       " 'diabolus': 'diabolus.jpg',\n",
       " 'caddy1f': 'caddy1f.jpg',\n",
       " 'annihilatorf': 'annihilatorf.jpg',\n",
       " 'grangerf': 'grangerf.jpg',\n",
       " 'lifeguardf': 'lifeguardf.jpg',\n",
       " 'gresleyf': 'gresleyf.jpg',\n",
       " 'akumaf': 'akumaf.jpg',\n",
       " 'nemesisf': 'nemesisf.jpg',\n",
       " 'ingotf': 'ingotf.jpg',\n",
       " 'limo2': 'limo2.jpg',\n",
       " 'turismorf': 'turismorf.jpg',\n",
       " 'blazertrevorf': 'blazertrevorf.jpg',\n",
       " 'esskey': 'esskey.jpg',\n",
       " 'xls': 'xls.jpg',\n",
       " 'nightshade': 'nightshade.jpg',\n",
       " 'warrenerf': 'warrenerf.jpg',\n",
       " 'superdiamondf': 'superdiamondf.jpg',\n",
       " 'infernusf': 'infernusf.jpg',\n",
       " 'penetrator': 'penetrator.jpg',\n",
       " 'fusiladef': 'fusiladef.jpg',\n",
       " 'tempesta': 'tempesta.jpg',\n",
       " 'slamvanf': 'slamvanf.jpg',\n",
       " 'tornado3f': 'tornado3f.jpg',\n",
       " 'suntrapf': 'suntrapf.jpg',\n",
       " 'faggio-sport': 'faggio-sport.jpg',\n",
       " 'cognoscenticabriof': 'cognoscenticabriof.jpg',\n",
       " 'vortex': 'vortex.jpg',\n",
       " 'packerf': 'packerf.jpg',\n",
       " 'reaper': 'reaper.jpg',\n",
       " 'penumbraf': 'penumbraf.jpg',\n",
       " 'brickade': 'brickade.jpg',\n",
       " 'blistacompactf': 'blistacompactf.jpg',\n",
       " 'kraken': 'kraken.jpg',\n",
       " 'schafter4': 'schafter4.jpg',\n",
       " 'pfister811': 'pfister811.jpg',\n",
       " 'tractorf': 'tractorf.jpg',\n",
       " 'insurgent': 'insurgent.jpg',\n",
       " 'burritof': 'burritof.jpg',\n",
       " 'miljetf': 'miljetf.jpg',\n",
       " 'caddy2f': 'caddy2f.jpg',\n",
       " 'pounderf': 'pounderf.jpg',\n",
       " 'barracksf': 'barracksf.jpg',\n",
       " 'volatus': 'volatus.jpg',\n",
       " 'phoenixf': 'phoenixf.jpg',\n",
       " 'f620f': 'f620f.jpg',\n",
       " '.dirmaker.sh.swp': '.dirmaker.sh.swp.jpg',\n",
       " 'sentinelf': 'sentinelf.jpg',\n",
       " 'airtugf': 'airtugf.jpg',\n",
       " 'rapidgtf': 'rapidgtf.jpg',\n",
       " 'x80-proto': 'x80-proto.jpg',\n",
       " 'specter': 'specter.jpg',\n",
       " 'cliffhanger': 'cliffhanger.jpg',\n",
       " 'patriotf': 'patriotf.jpg',\n",
       " 'dubstaf': 'dubstaf.jpg',\n",
       " 'lynx': 'lynx.jpg',\n",
       " 'policeriotf': 'policeriotf.jpg',\n",
       " 'armored-boxville': 'armored-boxville.jpg',\n",
       " 'clownvanf': 'clownvanf.jpg',\n",
       " 'rhapsodyf': 'rhapsodyf.jpg',\n",
       " 'nightblade': 'nightblade.jpg',\n",
       " 'banshee900r': 'banshee900r.jpg',\n",
       " 'comet-retro-custom': 'comet-retro-custom.jpg',\n",
       " 'technical': 'technical.jpg',\n",
       " 'policecruiser1f': 'policecruiser1f.jpg',\n",
       " 'towtrucklargef': 'towtrucklargef.jpg',\n",
       " 'ruffianf': 'ruffianf.jpg',\n",
       " 'stratumf': 'stratumf.jpg',\n",
       " 'taxi2f': 'taxi2f.jpg',\n",
       " 'youga-classic': 'youga-classic.jpg',\n",
       " 'cruiserf': 'cruiserf.jpg',\n",
       " 'carbonrsf': 'carbonrsf.jpg',\n",
       " 'skyliftf': 'skyliftf.jpg',\n",
       " 'avarus': 'avarus.jpg',\n",
       " 'schafterf': 'schafterf.jpg',\n",
       " 'fibgrangerf': 'fibgrangerf.jpg',\n",
       " 'policetransporterf': 'policetransporterf.jpg',\n",
       " 'wolfsbane': 'wolfsbane.jpg',\n",
       " 'ponyf': 'ponyf.jpg',\n",
       " 'beejayxlf': 'beejayxlf.jpg',\n",
       " 'schafter3': 'schafter3.jpg',\n",
       " 'besraf': 'besraf.jpg',\n",
       " 'moonbeam': 'moonbeam.jpg',\n",
       " 'daemonf': 'daemonf.jpg',\n",
       " 'mammatusf': 'mammatusf.jpg',\n",
       " 'submersiblef': 'submersiblef.jpg',\n",
       " 'suranof2': 'suranof2.jpg',\n",
       " 'cognoscenti': 'cognoscenti.jpg',\n",
       " 'glendalef': 'glendalef.jpg',\n",
       " 'cognoscenti2': 'cognoscenti2.jpg',\n",
       " 'ruinerf': 'ruinerf.jpg',\n",
       " 'dominator2f': 'dominator2f.jpg',\n",
       " 'freighttrain1': 'freighttrain1.jpg',\n",
       " 'jackalf': 'jackalf.jpg',\n",
       " 'dominatorf': 'dominatorf.jpg',\n",
       " 'premierf': 'premierf.jpg',\n",
       " 'defiler': 'defiler.jpg',\n",
       " 'zombie-bobber': 'zombie-bobber.jpg',\n",
       " 'felonf': 'felonf.jpg',\n",
       " 'lawnmowerf': 'lawnmowerf.jpg',\n",
       " 'sanchez2f': 'sanchez2f.jpg',\n",
       " 'firetruckf': 'firetruckf.jpg',\n",
       " 'tacovanf': 'tacovanf.jpg',\n",
       " 'endurof': 'endurof.jpg',\n",
       " 'velumf': 'velumf.jpg',\n",
       " 'zionf': 'zionf.jpg',\n",
       " 'pantof': 'pantof.jpg',\n",
       " 'coquetteclassic1f': 'coquetteclassic1f.jpg',\n",
       " 'bladef': 'bladef.jpg',\n",
       " 'p996lazerf': 'p996lazerf.jpg',\n",
       " 'bati801rrf': 'bati801rrf.jpg',\n",
       " 'mesa3f': 'mesa3f.jpg',\n",
       " 'savage': 'savage.jpg',\n",
       " 'rooseveltvalor': 'rooseveltvalor.jpg',\n",
       " 'nimbus': 'nimbus.jpg',\n",
       " 'washingtonf': 'washingtonf.jpg',\n",
       " 'zioncabriof': 'zioncabriof.jpg',\n",
       " 'osirisf': 'osirisf.jpg',\n",
       " 'rubblef': 'rubblef.jpg',\n",
       " '9ff': '9ff.jpg',\n",
       " 'entityxff': 'entityxff.jpg',\n",
       " 'mallardf': 'mallardf.jpg',\n",
       " 'tipper2f': 'tipper2f.jpg',\n",
       " 'surgef': 'surgef.jpg',\n",
       " 'paradisef': 'paradisef.jpg',\n",
       " 'cheetahf': 'cheetahf.jpg',\n",
       " 'landstalkerf': 'landstalkerf.jpg',\n",
       " 'bulletf': 'bulletf.jpg',\n",
       " 'dilettante1f': 'dilettante1f.jpg',\n",
       " 'marquisf': 'marquisf.jpg',\n",
       " 'squalof': 'squalof.jpg',\n",
       " 'hakuchouf': 'hakuchouf.jpg',\n",
       " 'biftaf': 'biftaf.jpg',\n",
       " 'cutterf': 'cutterf.jpg',\n",
       " 'coquette1f': 'coquette1f.jpg',\n",
       " 'alphaf': 'alphaf.jpg',\n",
       " 'nero': 'nero.jpg',\n",
       " 'cargobobf': 'cargobobf.jpg',\n",
       " 'pcj600f': 'pcj600f.jpg',\n",
       " 'hexerf': 'hexerf.jpg',\n",
       " 'faggio-mod': 'faggio-mod.jpg',\n",
       " 'cablecar1': 'cablecar1.jpg',\n",
       " 'jetf': 'jetf.jpg',\n",
       " 'issif': 'issif.jpg',\n",
       " 'banshee2f': 'banshee2f.jpg',\n",
       " 'gameplay-1-cool-rims': 'gameplay-1-cool-rims.jpg',\n",
       " 'spacedockerf': 'spacedockerf.jpg',\n",
       " 'serranof': 'serranof.jpg',\n",
       " 'cuban800f': 'cuban800f.jpg',\n",
       " 'elegy-retro-custom': 'elegy-retro-custom.jpg',\n",
       " 'verlierer': 'verlierer.jpg',\n",
       " 'blazerlifeguardf': 'blazerlifeguardf.jpg',\n",
       " 'marshallf': 'marshallf.jpg',\n",
       " 'tampa': 'tampa.jpg',\n",
       " 'airportbusf': 'airportbusf.jpg',\n",
       " 'intruderf': 'intruderf.jpg',\n",
       " 'duneloaderf': 'duneloaderf.jpg',\n",
       " 'policecruiserbuffalof': 'policecruiserbuffalof.jpg',\n",
       " 'tyrus': 'tyrus.jpg',\n",
       " 'speedof': 'speedof.jpg',\n",
       " 'kuruma': 'kuruma.jpg',\n",
       " 'buffalo2f': 'buffalo2f.jpg',\n",
       " 'primof': 'primof.jpg',\n",
       " 'dumpf': 'dumpf.jpg',\n",
       " 'habanerof': 'habanerof.jpg',\n",
       " 'dukeodeathf': 'dukeodeathf.jpg',\n",
       " 'sultanrs': 'sultanrs.jpg',\n",
       " 'policemaverick1f': 'policemaverick1f.jpg',\n",
       " 'rancherxlf': 'rancherxlf.jpg',\n",
       " 'valkyrie': 'valkyrie.jpg',\n",
       " 'mixer2f': 'mixer2f.jpg',\n",
       " 'elegyrh8f': 'elegyrh8f.jpg',\n",
       " 'faggiof': 'faggiof.jpg',\n",
       " 'speederf': 'speederf.jpg'}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "veh_dict = {}\n",
    "\n",
    "for char in os.listdir(char_path):\n",
    "    veh_dict[char] = char + '.jpg'\n",
    "#char_dict = caer.sort_dict(char_dict, descending=True)\n",
    "\n",
    "\n",
    "veh_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d508a2c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T15:43:47.797809Z",
     "iopub.status.busy": "2024-10-03T15:43:47.796970Z",
     "iopub.status.idle": "2024-10-03T15:43:47.803211Z",
     "shell.execute_reply": "2024-10-03T15:43:47.802034Z"
    },
    "papermill": {
     "duration": 0.018005,
     "end_time": "2024-10-03T15:43:47.806110",
     "exception": false,
     "start_time": "2024-10-03T15:43:47.788105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TF version 2.16.1\n"
     ]
    }
   ],
   "source": [
    "# ML \n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "print(\"TF version\", tf.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "96c522ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T15:43:47.823904Z",
     "iopub.status.busy": "2024-10-03T15:43:47.823027Z",
     "iopub.status.idle": "2024-10-03T15:43:48.211408Z",
     "shell.execute_reply": "2024-10-03T15:43:48.210089Z"
    },
    "papermill": {
     "duration": 0.400751,
     "end_time": "2024-10-03T15:43:48.214541",
     "exception": false,
     "start_time": "2024-10-03T15:43:47.813790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 392 images belonging to 392 classes.\n"
     ]
    }
   ],
   "source": [
    "# Loading a data set\n",
    "# Loading training size and scale by  1/255 to make pixel values [0,1]\n",
    "\n",
    "train_dir = char_path\n",
    "\n",
    "datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n",
    "    rescale=1.0/255.0,  # Normalize pixel values\n",
    "    rotation_range=20,\n",
    "    width_shift_range=0.2,\n",
    "    height_shift_range=0.2,\n",
    "    shear_range=0.2,\n",
    "    zoom_range=0.2,\n",
    "    horizontal_flip=True,\n",
    "    fill_mode='nearest'\n",
    ")\n",
    "\n",
    "# Load images from the directory\n",
    "train_generator = datagen.flow_from_directory(\n",
    "    train_dir,\n",
    "    target_size=(224, 224),  # Adjust based on your model\n",
    "    batch_size=32,\n",
    "    class_mode='categorical'  # Use 'binary' if it's binary classification\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a49a175f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T15:43:48.231953Z",
     "iopub.status.busy": "2024-10-03T15:43:48.231484Z",
     "iopub.status.idle": "2024-10-03T15:43:49.774292Z",
     "shell.execute_reply": "2024-10-03T15:43:49.773276Z"
    },
    "papermill": {
     "duration": 1.554673,
     "end_time": "2024-10-03T15:43:49.777065",
     "exception": false,
     "start_time": "2024-10-03T15:43:48.222392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_224_no_top.h5\n",
      "\u001b[1m9406464/9406464\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.applications import MobileNetV2\n",
    "from tensorflow.keras import layers, models\n",
    "# Load the pre-trained model\n",
    "base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n",
    "\n",
    "\n",
    "# Freeze the base model\n",
    "base_model.trainable = False\n",
    "\n",
    "# Add custom layers on top\n",
    "model = models.Sequential([\n",
    "    base_model,\n",
    "    layers.GlobalAveragePooling2D(),\n",
    "    layers.Dense(256, activation='relu'),\n",
    "    layers.Dense(train_generator.num_classes, activation='softmax')\n",
    "])\n",
    "\n",
    "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9daf9dbb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T15:43:49.795724Z",
     "iopub.status.busy": "2024-10-03T15:43:49.795297Z",
     "iopub.status.idle": "2024-10-03T15:47:21.457016Z",
     "shell.execute_reply": "2024-10-03T15:47:21.455686Z"
    },
    "papermill": {
     "duration": 211.674166,
     "end_time": "2024-10-03T15:47:21.459954",
     "exception": false,
     "start_time": "2024-10-03T15:43:49.785788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
      "  self._warn_if_super_not_called()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 783ms/step - accuracy: 0.0000e+00 - loss: 6.2375\n",
      "Epoch 2/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.0000e+00 - loss: 6.4425  \n",
      "Epoch 3/25\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/contextlib.py:153: UserWarning: Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches. You may need to use the `.repeat()` function when building your dataset.\n",
      "  self.gen.throw(typ, value, traceback)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 746ms/step - accuracy: 0.0555 - loss: 5.7531\n",
      "Epoch 4/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 954us/step - accuracy: 0.0938 - loss: 5.6495\n",
      "Epoch 5/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 735ms/step - accuracy: 0.0750 - loss: 5.5311\n",
      "Epoch 6/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 978us/step - accuracy: 0.0625 - loss: 5.6236\n",
      "Epoch 7/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 730ms/step - accuracy: 0.1051 - loss: 4.9636\n",
      "Epoch 8/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 963us/step - accuracy: 0.0625 - loss: 5.1501\n",
      "Epoch 9/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 812ms/step - accuracy: 0.1322 - loss: 4.4784\n",
      "Epoch 10/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 964us/step - accuracy: 0.1250 - loss: 4.3852\n",
      "Epoch 11/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 728ms/step - accuracy: 0.3500 - loss: 3.7257\n",
      "Epoch 12/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 987us/step - accuracy: 0.1875 - loss: 4.0473\n",
      "Epoch 13/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 759ms/step - accuracy: 0.4695 - loss: 3.0616\n",
      "Epoch 14/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.3438 - loss: 3.6129  \n",
      "Epoch 15/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 745ms/step - accuracy: 0.5481 - loss: 2.5421\n",
      "Epoch 16/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.3438 - loss: 2.9609  \n",
      "Epoch 17/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 736ms/step - accuracy: 0.6580 - loss: 2.1590\n",
      "Epoch 18/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.4375 - loss: 2.5103  \n",
      "Epoch 19/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 765ms/step - accuracy: 0.6757 - loss: 1.8667\n",
      "Epoch 20/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.5312 - loss: 1.8716  \n",
      "Epoch 21/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 725ms/step - accuracy: 0.7800 - loss: 1.5202\n",
      "Epoch 22/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 965us/step - accuracy: 0.7188 - loss: 1.6944\n",
      "Epoch 23/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 767ms/step - accuracy: 0.8310 - loss: 1.3298\n",
      "Epoch 24/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.6875 - loss: 1.6051  \n",
      "Epoch 25/25\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 705ms/step - accuracy: 0.8591 - loss: 1.0611\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    train_generator,\n",
    "    steps_per_epoch=train_generator.samples // train_generator.batch_size,\n",
    "    epochs=25  # Adjust as needed\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "513a2d79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T15:47:21.520978Z",
     "iopub.status.busy": "2024-10-03T15:47:21.519072Z",
     "iopub.status.idle": "2024-10-03T15:47:21.816753Z",
     "shell.execute_reply": "2024-10-03T15:47:21.815506Z"
    },
    "papermill": {
     "duration": 0.330783,
     "end_time": "2024-10-03T15:47:21.819613",
     "exception": false,
     "start_time": "2024-10-03T15:47:21.488830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.save('gta_vehicles.h5')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5728766,
     "sourceId": 9429798,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5741629,
     "sourceId": 9447036,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 256.673904,
   "end_time": "2024-10-03T15:47:24.725423",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-03T15:43:08.051519",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
